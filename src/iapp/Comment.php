<?php
/**
 * Author: Amir Hossein Jahani | iAmir.net
 * Last modified: 12/20/20, 8:27 AM
 * Copyright (c) 2020. Powered by iamir.net
 */

namespace iLaravel\iPost\iApp;
use iLaravel\Core\iApp\Http\Requests\iLaravel as Request;

class Comment extends \iLaravel\Core\iApp\Model
{
    public $set_creator = false;

    public static $s_prefix = "IPC";
    public static $s_start = 24300000;
    public static $s_end = 728999999;

    protected $casts = [
        'approved_at' => 'timestamp',
        'data' => 'array',
        'like' => 'boolean',
    ];

    public $datetime = [
        'approved_at' => 'Y-m-d H:i:s',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::saving(function (self $event) {
            unset($event->replays);
            $item = isset($event->item['value']) ? $event->item['value'] : $event->item;
            if(!is_int($item)) {
                $itemmodel = imodal($event->item_model_title);
                $event->item = $itemmodel::id($item);
            }
            unset($event->stars);
        });
        static::deleted(function (self $event) {
            $event->replays()->delete();
        });
    }

    public static function getRuleItem(Request $request, $model, $parent, $current, $filters, $operators) {
        /*$filters[6]['rule'] = function ($filter) use ($request) {
            if ($request->has('filters')){
                $filters = is_json($request->filters) ? json_decode($request->filters) : $request->filters;
                $type = null;
                $filters = array_map(function ($filter) use (&$type) {
                    $filter = (array) (is_json($filter) ? json_decode($filter) : $filter);
                    if (isset($filter['type']) && $filter['type'] == 'type')
                        $type = $filter;
                    return $filter;
                }, $filters);
                $model = ipost("items.{$type['value']}.model", "Post");
                (new \Illuminate\Http\Request((array) $filter))->validate([
                    'value' =>  "required|exists_serial:{$model}",
                ]);
            }
            return $filter;
        };*/
        return $filters;
    }
    public static function getItemQueryFilter(&$model, $filter, $params, $current, $filters) {
        $type = isset($current['type']) ? $current['type'] : null;
        $itemmodel = ipost("items.{$type}.model", "Post");
        $itemmodel = imodal($itemmodel);
        $item = $itemmodel::findByAny($filter->value);
        if ($item && $filter->value){
            $model->where('item', is_integer($item) ? $item : $item->id);
            $current['item'] = $filter->value;
        }
        return $current;
    }

    public function additionalUpdate($request = null, $additional = null, $parent = null){
        $additional = $additional ? :$this->getAdditional();
        if (is_array(@$request->stars) && count($request->stars)) {
            foreach ($request->stars as $index => $star)
                if ($star > 0)
                    $this->stars()->updateOrCreate(['title_id' => $index + 1], ['star' => $star]);
            $this->star = _avg($request->stars);
        }
        if ($item_model = $this->item_model)
            $item_model->product->update(['avg_rates'=> _avg([$item_model->avg_rating, $this->star])]);
        $request = new Request((array)$additional);
        $replays = $request->replays && count((array)$request->replays) ? (array)$request->replays : [];
        \request()->request->remove('replays');
        _save_child($this->replays(), $replays, imodal('Comment'));
        parent::additionalUpdate($request, $additional, $parent);
    }

    public function creator()
    {
        return $this->belongsTo(imodal('User'));
    }

    public function parent()
    {
        return $this->belongsTo(imodal('Comment'), 'parent_id');
    }

    public function replays()
    {
        return $this->hasMany(imodal('Comment'), 'parent_id');
    }
    public function stars()
    {
        return $this->hasMany(imodal('CommentStar'), 'comment_id');
    }

    public function poll_entries() {
        return $this->belongsToMany(imodal('PollEntry'), 'comments_poll_entries');
    }

    public function getItemModelTitleAttribute() {
        return ipost("items.{$this->type}.model", "Post");
    }

    public function getItemModelAttribute() {
        return (imodal($this->item_model_title))::find($this->item);
    }

    public function rules(Request $request, $action, $arg1 = null)
    {
        $arg1 = is_string($arg1) ? $this::findBySerial($arg1) : $arg1;
        $rules = [];
        $types = array_keys(ipost("items", []));
        $type = is_array(@$request->type) && isset($request->type['value']) ? $request->type['value'] : @$request->type;
        $itemmodel = ipost("items.{$type}.model", "Post");
        $additionalRules = [
            "replays.*.creator_id" => "nullable|exists:users,id",
            'replays.*.name' => "required|string",
            'replays.*.text' => "required|string",
            'replays.*.approved_at' => "nullable|date_format:Y-m-d H:i:s",
            'replays.*.status' => 'nullable|in:' . join(',', iconfig('status.comments', iconfig('status.global'))),
            'stars.*' => "nullable|numeric|min:0|max:5",
        ];
        switch ($action) {
            case 'store':
                $rules = ["parent_id" => "nullable|exists:comments,id",];
            case 'update':
                $rules = array_merge($rules, [
                    "creator_id" => "nullable|exists:users,id",
                    'name' => "required|string",
                    'type' => "required|string|in:". join(',', $types),
                    "item" => "required|exists_serial:$itemmodel",
                    'text' => "required|string",
                    'positive' => "required|string",
                    'negative' => "required|string",
                    'star' => "nullable|numeric|min:0|max:5",
                    'like' => "nullable|boolean",
                    'approved_at' => "nullable|date_format:Y-m-d H:i:s",
                    'status' => 'nullable|in:' . join(',', iconfig('status.comments', iconfig('status.global'))),
                ], $additionalRules);
                if (!$request->parent_id)
                    $rules['type'] = 'required|exists:types,name';
                break;
            case 'additional':
                $rules = $additionalRules;
                break;
        }
        return $rules;
    }
}
