<?php
/**
 * Author: Amir Hossein Jahani | iAmir.net
 * Last modified: 12/20/20, 8:27 AM
 * Copyright (c) 2020. Powered by iamir.net
 */

namespace iLaravel\iPost\iApp;
use iLaravel\Core\iApp\Http\Requests\iLaravel as Request;

class Comment extends \iLaravel\Core\iApp\Model
{
    public $set_creator = false;

    public static $s_prefix = "IPC";
    public static $s_start = 24300000;
    public static $s_end = 728999999;

    protected $casts = [
        'approved_at' => 'timestamp',
        'data' => 'array',
        'like' => 'boolean',
    ];

    public $datetime = [
        'approved_at' => 'Y-m-d H:i',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::saving(function (self $event) {
            unset($event->replays);
        });
        static::saved(function (self $event) {
            $CommentPolicy = ipolicy('CommentPolicy');
            if (!$event->parent_id && (new $CommentPolicy())->update(auth()->user(), $event) || (new $CommentPolicy())->create(auth()->user(), $event) ){
                $event->additionalUpdate($event);
            }
        });
        static::deleted(function (self $event) {
            $event->replays()->delete();
        });
    }

    public function additionalUpdate($record = null, $additional = null){
        if (!$record) $record = $this;
        $additional = $additional ? :$this->getAdditional();
        $request = new Request($additional);
        $replays = $request->replays && count($request->replays) ? $request->replays : [];
        \request()->request->remove('replays');
        _save_child($record->replays(), $replays, imodal('Comment'));
    }

    public function creator()
    {
        return $this->belongsTo(imodal('User'));
    }

    public function parent()
    {
        return $this->belongsTo(imodal('Comment'), 'parent_id');
    }

    public function replays()
    {
        return $this->hasMany(imodal('Comment'), 'parent_id');
    }

    public function getApprovedAtAttribute($value)
    {
        return format_datetime($value, isset($this->datetime) ? $this->datetime : [], 'approved_at');
    }

    public function poll_entries() {
        return $this->belongsToMany(imodal('PollEntry'), 'comments_poll_entries');
    }

    public function rules(Request $request, $action, $arg1 = null)
    {
        $arg1 = is_string($arg1) ? $this::findBySerial($arg1) : $arg1;
        $rules = [];
        $additionalRules = [
            "replays.*.creator_id" => "nullable|exists:users,id",
            'replays.*.name' => "required|string",
            'replays.*.text' => "required|string",
            'replays.*.approved_at' => "nullable|date_format:Y-m-d H:i:s",
            'replays.*.status' => 'nullable|in:' . join(iconfig('status.comments', iconfig('status.global')), ','),
        ];
        switch ($action) {
            case 'store':
            case 'update':
                $rules = array_merge($rules, [
                    "creator_id" => "nullable|exists:users,id",
                    'name' => "required|string",
                    'text' => "required|string",
                    'star' => "nullable|numeric|min:0|max:5",
                    'like' => "nullable|boolean",
                    'type' => 'required|exists:types,name',
                    'approved_at' => "nullable|date_format:Y-m-d H:i:s",
                    'status' => 'nullable|in:' . join(iconfig('status.comments', iconfig('status.global')), ','),
                ], $additionalRules);
                break;
            case 'additional':
                $rules = $additionalRules;
                break;
        }
        return $rules;
    }
}
